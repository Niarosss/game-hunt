import { EpicGames } from "./lib/epic-games.js";
import { Steam } from "./lib/steam.js";
import { TelegramBot } from "./lib/telegram.js";
import { Storage } from "./lib/storage.js";
import dotenv from "dotenv";

dotenv.config({ path: ".env.local" });

async function testTracking() {
  console.log("üß™ –¢–ï–°–¢–£–Ñ–ú–û –°–ò–°–¢–ï–ú–£ –í–Ü–î–°–¢–ï–ñ–ï–ù–ù–Ø\n");

  if (!process.env.TELEGRAM_BOT_TOKEN) {
    console.log("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
    return;
  }

  try {
    const epic = new EpicGames();
    const steam = new Steam();
    const storage = new Storage();
    const telegram = new TelegramBot(
      process.env.TELEGRAM_BOT_TOKEN,
      process.env.TELEGRAM_CHAT_ID
    );

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    const currentState = storage.loadGames();
    console.log("üìä –ü–û–ß–ê–¢–ö–û–í–ò–ô –°–¢–ê–ù:");
    console.log(`üéØ Epic Games: ${currentState.epic.length} —ñ–≥–æ—Ä`);
    console.log(`‚ö° Steam: ${currentState.steam.length} —ñ–≥–æ—Ä`);

    // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —ñ–≥—Ä–∏
    console.log("\nüì° –û—Ç—Ä–∏–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ —Ä–æ–∑–¥–∞—á—ñ...");
    const [currentEpicGames, currentSteamGames] = await Promise.all([
      epic.getFreeGames(),
      steam.getFreeGames(),
    ]);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–∏
    const changes = storage.updateGames(currentEpicGames, currentSteamGames);

    console.log("\nüìä –ó–ù–ê–ô–î–ï–ù–Ü –ó–ú–Ü–ù–ò:");
    console.log(`üÜï –ù–æ–≤—ñ Epic Games: ${changes.newEpic.length}`);
    console.log(`üÜï –ù–æ–≤—ñ Steam: ${changes.newSteam.length}`);
    console.log(`üîö –ó–∞–≤–µ—Ä—à–∏–ª–∏—Å—è Epic: ${changes.endedEpic.length}`);
    console.log(`üîö –ó–∞–≤–µ—Ä—à–∏–ª–∏—Å—è Steam: ${changes.endedSteam.length}`);

    // –¢–µ—Å—Ç—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if (process.env.TELEGRAM_CHAT_ID) {
      // –ù–æ–≤—ñ Epic Games
      if (changes.newEpic.length > 0) {
        const activeNew = changes.newEpic.filter((game) => game.isActive);
        if (activeNew.length > 0) {
          const message = formatNewGamesMessage(
            activeNew,
            "Epic Games",
            "üÜï –¢–ï–°–¢: –ù–û–í–ê –†–û–ó–î–ê–ß–ê!"
          );
          await telegram.sendMessage(message);
          console.log(
            "‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ Epic Games –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
          );
        }
      }

      // –ù–æ–≤—ñ Steam
      if (changes.newSteam.length > 0) {
        const message = formatNewGamesMessage(
          changes.newSteam,
          "Steam",
          "üÜï –¢–ï–°–¢: –ù–û–í–ê –†–û–ó–î–ê–ß–ê!"
        );
        await telegram.sendMessage(message);
        console.log("‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ Steam –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ");
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω—ñ —Ä–æ–∑–¥–∞—á—ñ
      if (changes.endedEpic.length > 0 || changes.endedSteam.length > 0) {
        const message = formatEndedGamesMessage(
          changes.endedEpic,
          changes.endedSteam
        );
        await telegram.sendMessage(message);
        console.log(
          "‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Ä–æ–∑–¥–∞—á—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
        );
      }

      if (
        changes.newEpic.length === 0 &&
        changes.newSteam.length === 0 &&
        changes.endedEpic.length === 0 &&
        changes.endedSteam.length === 0
      ) {
        console.log("‚ÑπÔ∏è –ó–º—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è");
      }
    }

    // –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    const finalState = storage.loadGames();
    console.log("\nüìä –§–Ü–ù–ê–õ–¨–ù–ò–ô –°–¢–ê–ù:");
    console.log(`üéØ Epic Games: ${finalState.epic.length} —ñ–≥–æ—Ä`);
    console.log(`‚ö° Steam: ${finalState.steam.length} —ñ–≥–æ—Ä`);
    console.log(`üïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${finalState.lastUpdate}`);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", error);
  }
}

// –§—É–Ω–∫—Ü—ñ—ó —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É)
function formatNewGamesMessage(games, platform, title) {
  let message = `${title}\n`;
  message += `üéÆ <b>${platform}</b>\n\n`;

  games.forEach((game) => {
    const priceInfo = game.hasMeaningfulPrice
      ? `üíµ <s>${game.originalPrice}</s> <b>–ë–ï–ó–ö–û–®–¢–û–í–ù–û</b>\n`
      : `üíµ <b>–ë–ï–ó–ö–û–®–¢–û–í–ù–û</b>\n`;

    const endDate = game.endDate
      ? `‚è∞ –î–æ: <b>${game.endDate.toLocaleDateString("uk-UA")}</b>\n`
      : "";

    message += `üéÆ <b>${game.title}</b>\n`;
    message += priceInfo;
    message += endDate;
    message += `üîó <a href="${game.url}">–û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä—É</a>\n\n`;
  });

  return message;
}

function formatEndedGamesMessage(endedEpic, endedSteam) {
  let message = `üîö <b>–¢–ï–°–¢: –†–û–ó–î–ê–ß–Ü –ó–ê–í–ï–†–®–ò–õ–ò–°–Ø</b>\n\n`;

  if (endedEpic.length > 0) {
    message += `üéØ <b>Epic Games:</b>\n`;
    endedEpic.forEach((game) => {
      message += `‚ùå ${game.title}\n`;
    });
    message += "\n";
  }

  if (endedSteam.length > 0) {
    message += `‚ö° <b>Steam:</b>\n`;
    endedSteam.forEach((game) => {
      message += `‚ùå ${game.title}\n`;
    });
    message += "\n";
  }

  return message;
}

testTracking();
