import { kv } from "@vercel/kv";

export class Storage {
  constructor() {
    this.key = "games_data";
  }

  async loadGames() {
    try {
      const data = await kv.get(this.key);
      console.log("üìÅ –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ KV");
      return data || { epic: [], steam: [], lastUpdate: null };
    } catch (error) {
      console.log("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ KV:", error.message);
      return { epic: [], steam: [], lastUpdate: null };
    }
  }

  async saveGames(games) {
    try {
      games.lastUpdate = new Date().toISOString();
      await kv.set(this.key, games);
      console.log("üíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ KV");
      return true;
    } catch (error) {
      console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ KV:", error.message);
      return false;
    }
  }

  findNewGames(oldGames, newGames, platform) {
    // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
    if (!oldGames[platform] || !Array.isArray(oldGames[platform])) {
      console.log(`‚ö†Ô∏è ${platform}: –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö, –≤—Å—ñ —ñ–≥—Ä–∏ –Ω–æ–≤—ñ`);
      return newGames; // –í—Å—ñ —ñ–≥—Ä–∏ –Ω–æ–≤—ñ, —è–∫—â–æ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥–∞–Ω–∏—Ö
    }

    const oldIds = new Set(oldGames[platform].map((game) => game.id));
    const newGamesList = newGames.filter((game) => !oldIds.has(game.id));

    console.log(
      `üîç ${platform}: ${newGamesList.length} –Ω–æ–≤–∏—Ö —ñ–≥—Ä –∑ ${newGames.length}`
    );
    return newGamesList;
  }

  findEndedGames(oldGames, newGames, platform) {
    // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
    if (!oldGames[platform] || !Array.isArray(oldGames[platform])) {
      return []; // –ù–µ–º–∞—î —Å—Ç–∞—Ä–∏—Ö —ñ–≥–æ—Ä - –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—è
    }

    const newIds = new Set(newGames.map((game) => game.id));
    const endedGames = oldGames[platform].filter(
      (oldGame) => !newIds.has(oldGame.id)
    );

    console.log(`üîö ${platform}: ${endedGames.length} —ñ–≥–æ—Ä –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è`);
    return endedGames;
  }

  async updateGames(newEpicGames, newSteamGames) {
    const oldGames = await this.loadGames();

    console.log("üîÑ –ü–æ—Ä—ñ–≤–Ω—é—é –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –¥–∞–Ω–∏–º–∏...");
    console.log("üìä –°—Ç–∞—Ä—ñ –¥–∞–Ω—ñ:", {
      epic: oldGames.epic?.length || 0,
      steam: oldGames.steam?.length || 0,
    });

    const changes = {
      newEpic: this.findNewGames(oldGames, newEpicGames, "epic"),
      newSteam: this.findNewGames(oldGames, newSteamGames, "steam"),
      endedEpic: this.findEndedGames(oldGames, newEpicGames, "epic"),
      endedSteam: this.findEndedGames(oldGames, newSteamGames, "steam"),
    };

    const updatedGames = {
      epic: newEpicGames,
      steam: newSteamGames,
      lastUpdate: new Date().toISOString(),
    };

    await this.saveGames(updatedGames);

    return changes;
  }

  async getStats() {
    const games = await this.loadGames();
    return {
      totalEpic: games.epic?.length || 0,
      totalSteam: games.steam?.length || 0,
      lastUpdate: games.lastUpdate,
    };
  }
}
